import json
import requests
import wikipedia.exceptions
from flask import request
from bs4 import BeautifulSoup
import logging
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, CallbackContext, CallbackQueryHandler, \
    ConversationHandler, Filters
from wikipedia.exceptions import PageError, DisambiguationError

from app.all_massage_handler import get_image_url
from app.news_parsers import parse_politics, parse_avto, parse_sience, parse_sports, parse_technology, parse_economics
from app.pinterest_parser import parse_pinterest_cats, parse_pinterest_dogs, parse_pinterest_mems
from app.reddit_parser import parse_reddit_new, parse_reddit_hot, parse_reddit_top
from app.wiki_parser import search_wiki
from app import flask_app, Config

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

WIKI = 1


def start(update: Update, context: CallbackContext):
    context.bot.send_message(chat_id=update.effective_chat.id, text=f'–ü—Ä–∏–≤—ñ—Ç {update.effective_user.username}'
                                                                    f', –ø—Ä–æ—Ö–æ–¥—å—Ç–µ, –ø–æ—á—É–≤–∞–π—Ç–µ —Å–µ–±–µ —è–∫ –≤–¥–æ–º–∞!'
                                                                    f' –û–±–µ—Ä—ñ—Ç—å —á–∏–º —Ö–æ—á–µ—Ç–µ –ø–æ—Ü—ñ–∫–∞–≤–∏—Ç–∏—Å—å –Ω–∞—Ä–∞–∑—ñ.')
    update.message.reply_text(text='–û–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤: ', reply_markup=main_menu_keyboard())


def menu_command(update: Update, context: CallbackContext):
    update.message.reply_text(text='–û–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤: ', reply_markup=main_menu_keyboard())


def help_(update: Update, context: CallbackContext):
    context.bot.send_message(chat_id=update.effective_chat.id,
                             text='–¶–µ–π –±–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ –≤ –Ω–∞–≤—á–∞–ª—å–Ω–∏—Ö —Ü—ñ–ª—è—Ö, –∑–∞–≤–¥—è–∫–∏ –Ω—å–æ–º—É –≤–∏ –º–æ–∂–µ—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é '
                                  '–∑ –π–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—ñ–≤. –î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É: /menu. '
                                  '–©–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –≤—Å–µ –∑–∞–Ω–æ–≤–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É: /start. –í —Ä–æ–∑–¥—ñ–ª—ñ "Wikipedia" –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Ç–∞—Ç–∏ –º–µ–Ω–µ –≤—Å–µ —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å.')


def main_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    context.bot.send_message(chat_id=update.effective_chat.id,
                             text='–û–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤: ',
                             reply_markup=main_menu_keyboard())


def news_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    context.bot.send_message(chat_id=query.message.chat_id,
                             text='–û–±–µ—Ä—ñ—Ç—å —â–æ —Ü—ñ–∫–∞–≤–∏—Ç—å –∑ –Ω–æ–≤–∏–Ω: ',
                             reply_markup=news_menu_keyboard())


def snetwork_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    context.bot.send_message(chat_id=query.message.chat_id,
                             text='–í —è–∫—ñ–π —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ–π –º–µ—Ä–µ–∂—ñ —Ö–æ—á–µ—à –ø–æ—Ä–∏—Ç–∏—Å—å?: ',
                             reply_markup=snetwork_menu_keyboard())


def fun_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    context.bot.send_message(chat_id=query.message.chat_id,
                             text='–©–æ –≤–∞–º –º–æ–∂–µ –ø—ñ–¥–Ω—è—Ç–∏ –Ω–∞—Å—Ç—Ä—ñ–π?: ',
                             reply_markup=fun_menu_keyboard())


def wiki_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    context.bot.send_message(chat_id=query.message.chat_id,
                             text='–©–æ–± –ø–æ–∫–∏–Ω—É—Ç–∏ –¥—ñ–∞–ª–æ–≥ –Ω–∞—Ç–∏—Å–Ω–∏ –≤–Ω–∏–∑—É',
                             reply_markup=wiki_menu_keyboard())


def main_menu_keyboard():
    keyboard = [[InlineKeyboardButton('–°–≤—ñ–∂—ñ –Ω–æ–≤–∏–Ω–∏ ‚è∞üì∞', callback_data='News')],
                [InlineKeyboardButton('–°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ üì±', callback_data='Social Network')],
                [InlineKeyboardButton('–†–æ–∑–≤–∞–≥–∏ üóø', callback_data='Fun')],
                [InlineKeyboardButton('Wikipedia üß†', callback_data='Wiki')]]
    return InlineKeyboardMarkup(keyboard)


def news_menu_keyboard():
    keyboard = [[InlineKeyboardButton('–ü–æ–ª—ñ—Ç–∏–∫–∞ üë®‚Äçüíº', callback_data='Politic')],
                [InlineKeyboardButton('–ï–∫–æ–Ω–æ–º—ñ–∫–∞ üí∏', callback_data='Economy')],
                [InlineKeyboardButton('–°–ø–æ—Ä—Ç üèãÔ∏è', callback_data='Sport')],
                [InlineKeyboardButton('–ù–∞—É–∫–∞ üî≠ ', callback_data='Sience')],
                [InlineKeyboardButton('–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó üöÄ', callback_data='Technology')],
                [InlineKeyboardButton('–ê–≤—Ç–æ üèé', callback_data='Auto')],
                [InlineKeyboardButton('–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data='main')]]
    return InlineKeyboardMarkup(keyboard)


def snetwork_menu_keyboard():
    keyboard = [[InlineKeyboardButton('Reddit Hot Posts üî• ', callback_data='Reddit Hot')],
                [InlineKeyboardButton('Reddit New Posts üÜï', callback_data='New Reddit')],
                [InlineKeyboardButton('Reddit Top Posts üîù', callback_data='Top Reddit')],
                [InlineKeyboardButton('–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data='main')]]
    return InlineKeyboardMarkup(keyboard)


def fun_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton('–ö–æ—Ç–∏–∫–∏ üêà', callback_data='Cats')],
        [InlineKeyboardButton('–°–æ–±–∞—á–∫–∏ üêï', callback_data='Dogs')],
        [InlineKeyboardButton('–ü–æ—Å–º—ñ—è—Ç–∏—Å—å –±–∏ üåù ...', callback_data='Mems')],
        [InlineKeyboardButton('–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data='main')]
    ]
    return InlineKeyboardMarkup(keyboard)


def wiki_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton('–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data='main')]
    ]
    return InlineKeyboardMarkup(keyboard)


def handler_news_politic(update: Update, context: CallbackContext):
    news = parse_politics()
    if news:
        for pol in news:
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text=f"{pol['time']}: {pol['title']}!\n–ú–µ–¥—ñ–∞: {pol['publishing']}\nLink: {pol['link']}")
    else:
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text='–í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —ñ–∑ —Å–µ—Ä–≤–µ—Ä–æ–º, —Å–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞—Ç–∏ —â–µ —Ä–∞–∑!')
    context.bot.send_message(chat_id=update.effective_chat.id, text='–û–±–µ—Ä—ñ—Ç—å —á–∏–º –±–∏ —â–µ –ø–æ—Ü—ñ–∫–∞–≤–∏—Ç–∏—Å—å üßê: ',
                             reply_markup=news_menu_keyboard())


def handler_news_economy(update: Update, context: CallbackContext):
    news = parse_economics()
    if news:
        for eco in news:
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text=f"{eco['time']}: {eco['title']}!\n–ú–µ–¥—ñ–∞: {eco['publishing']}\nLink: {eco['link']}")
    else:
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text='–í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —ñ–∑ —Å–µ—Ä–≤–µ—Ä–æ–º, —Å–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞—Ç–∏ —â–µ —Ä–∞–∑!')
    context.bot.send_message(chat_id=update.effective_chat.id, text='–û–±–µ—Ä—ñ—Ç—å —á–∏–º –±–∏ —â–µ –ø–æ—Ü—ñ–∫–∞–≤–∏—Ç–∏—Å—å üßê: ',
                             reply_markup=news_menu_keyboard())


def handler_news_sport(update: Update, context: CallbackContext):
    news = parse_sports()
    if news:
        for spo in news:
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text=f"{spo['time']}: {spo['title']}!\n–ú–µ–¥—ñ–∞: {spo['publishing']}\nLink: {spo['link']}")
    else:
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text='–í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —ñ–∑ —Å–µ—Ä–≤–µ—Ä–æ–º, —Å–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞—Ç–∏ —â–µ —Ä–∞–∑!')
    context.bot.send_message(chat_id=update.effective_chat.id, text='–û–±–µ—Ä—ñ—Ç—å —á–∏–º –±–∏ —â–µ –ø–æ—Ü—ñ–∫–∞–≤–∏—Ç–∏—Å—å üßê: ',
                             reply_markup=news_menu_keyboard())


def handler_news_sience(update: Update, context: CallbackContext):
    news = parse_sience()
    if news:
        for sie in news:
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text=f"{sie['time']}: {sie['title']}!\n–ú–µ–¥—ñ–∞: {sie['publishing']}\nLink: {sie['link']}")
    else:
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text='–í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —ñ–∑ —Å–µ—Ä–≤–µ—Ä–æ–º, —Å–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞—Ç–∏ —â–µ —Ä–∞–∑!')
    context.bot.send_message(chat_id=update.effective_chat.id, text='–û–±–µ—Ä—ñ—Ç—å —á–∏–º –±–∏ —â–µ –ø–æ—Ü—ñ–∫–∞–≤–∏—Ç–∏—Å—å üßê: ',
                             reply_markup=news_menu_keyboard())


def handler_news_technology(update: Update, context: CallbackContext):
    news = parse_technology()
    if news:
        for tch in news:
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text=f"{tch['time']}: {tch['title']}!\n–ú–µ–¥—ñ–∞: {tch['publishing']}\nLink: {tch['link']}")
    else:
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text='–í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —ñ–∑ —Å–µ—Ä–≤–µ—Ä–æ–º, —Å–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞—Ç–∏ —â–µ —Ä–∞–∑!')
    context.bot.send_message(chat_id=update.effective_chat.id, text='–û–±–µ—Ä—ñ—Ç—å —á–∏–º –±–∏ —â–µ –ø–æ—Ü—ñ–∫–∞–≤–∏—Ç–∏—Å—å üßê: ',
                             reply_markup=news_menu_keyboard())


def handler_news_avto(update: Update, context: CallbackContext):
    news = parse_avto()
    if news:
        for avt in news:
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text=f"{avt['time']}: {avt['title']}!\n–ú–µ–¥—ñ–∞: {avt['publishing']}\nLink: {avt['link']}")
    else:
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text='–í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —ñ–∑ —Å–µ—Ä–≤–µ—Ä–æ–º, —Å–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞—Ç–∏ —â–µ —Ä–∞–∑!')
    context.bot.send_message(chat_id=update.effective_chat.id, text='–û–±–µ—Ä—ñ—Ç—å —á–∏–º –±–∏ —â–µ –ø–æ—Ü—ñ–∫–∞–≤–∏—Ç–∏—Å—å üßê: ',
                             reply_markup=news_menu_keyboard())


def handler_cats(update: Update, context: CallbackContext):
    context.bot.send_message(chat_id=update.effective_chat.id, text='–ü–æ—á–∏–Ω–∞—é —à—É–∫–∞—Ç–∏ –∫–æ—Ç–∏–∫—ñ–≤ (‚óï‚Äø‚óï)')
    cats = parse_pinterest_cats()
    if cats:
        for pin in cats:
            context.bot.send_message(chat_id=update.effective_chat.id, text=f'–¢—É—Ç –º–æ–∂–Ω–∞ –∑–±–µ—Ä–µ–≥—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É -> {pin}')
    else:
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text='–í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —ñ–∑ —Å–µ—Ä–≤–µ—Ä–æ–º, —Å–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞—Ç–∏ —â–µ —Ä–∞–∑!')
    context.bot.send_message(chat_id=update.effective_chat.id, text='–Ø–∫—â–æ —Ö–æ—á–µ—Ç—å—Å—è —â–µ –≤–µ—Å–µ–ª–æ—â—ñ–≤ - –≤–∞–º —Å—é–¥–∏ ‚Üì ',
                             reply_markup=fun_menu_keyboard())


def handler_dogs(update: Update, context: CallbackContext):
    context.bot.send_message(chat_id=update.effective_chat.id, text='–ü–æ—á–∏–Ω–∞—é —à—É–∫–∞—Ç–∏ —Å–æ–±–∞—á–æ–∫ (^‰∫∫^)')
    dogs = parse_pinterest_dogs()
    if dogs:
        for pin in dogs:
            context.bot.send_message(chat_id=update.effective_chat.id, text=f'–¢—É—Ç –º–æ–∂–Ω–∞ –∑–±–µ—Ä–µ–≥—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É -> {pin}')
    else:
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text='–í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —ñ–∑ —Å–µ—Ä–≤–µ—Ä–æ–º, —Å–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞—Ç–∏ —â–µ —Ä–∞–∑!')
    context.bot.send_message(chat_id=update.effective_chat.id, text='–Ø–∫—â–æ —Ö–æ—á–µ—Ç—å—Å—è —â–µ –≤–µ—Å–µ–ª–æ—â—ñ–≤ - –≤–∞–º —Å—é–¥–∏ ‚Üì ',
                             reply_markup=fun_menu_keyboard())


def handler_mems(update: Update, context: CallbackContext):
    context.bot.send_message(chat_id=update.effective_chat.id, text='–ü–æ—á–∏–Ω–∞—é —à—É–∫–∞—Ç–∏ –º–µ–º–∏ (¬¥ÔΩ°‚Ä¢ ·µï ‚Ä¢ÔΩ°)')
    mems = parse_pinterest_mems()
    if mems:
        for pin in mems:
            context.bot.send_message(chat_id=update.effective_chat.id, text=f'–¢—É—Ç –º–æ–∂–Ω–∞ –∑–±–µ—Ä–µ–≥—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É -> {pin}')
    else:
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text='–í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —ñ–∑ —Å–µ—Ä–≤–µ—Ä–æ–º, —Å–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞—Ç–∏ —â–µ —Ä–∞–∑!')
    context.bot.send_message(chat_id=update.effective_chat.id, text='–Ø–∫—â–æ —Ö–æ—á–µ—Ç—å—Å—è —â–µ –≤–µ—Å–µ–ª–æ—â—ñ–≤ - –≤–∞–º —Å—é–¥–∏ ‚Üì ',
                             reply_markup=fun_menu_keyboard())


def handler_reddit_hot(update: Update, context: CallbackContext):
    context.bot.send_message(chat_id=update.effective_chat.id, text='–ó–∞—Ö–æ–¥–∂—É –Ω–∞ reddit ... ')
    red_hot = parse_reddit_hot()
    if red_hot:
        for data in red_hot:
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text=f"–ß–∞—Å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {data['time']}\n–ó–∞–≥–æ–ª–æ–≤–æ–∫ -> {data['title']}.\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤: {data['comment']}\nLink: {data['link']}")
    else:
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text='–í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —ñ–∑ —Å–µ—Ä–≤–µ—Ä–æ–º, —Å–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞—Ç–∏ —â–µ —Ä–∞–∑!')
    context.bot.send_message(chat_id=update.effective_chat.id, text='–û–±–µ—Ä—ñ—Ç—å —á–∏–º –±–∏ —â–µ –ø–æ—Ü—ñ–∫–∞–≤–∏—Ç–∏—Å—å üßê: ',
                             reply_markup=snetwork_menu_keyboard())


def handler_reddit_new(update: Update, context: CallbackContext):
    context.bot.send_message(chat_id=update.effective_chat.id, text='–ó–∞—Ö–æ–¥–∂—É –Ω–∞ reddit ... ')
    red_new = parse_reddit_new()
    if red_new:
        for data in red_new:
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text=f"–ß–∞—Å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {data['time']}\n–ó–∞–≥–æ–ª–æ–≤–æ–∫ -> {data['title']}.\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤: {data['comment']}\nLink: {data['link']}")
    else:
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text='–í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —ñ–∑ —Å–µ—Ä–≤–µ—Ä–æ–º, —Å–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞—Ç–∏ —â–µ —Ä–∞–∑!')
    context.bot.send_message(chat_id=update.effective_chat.id, text='–û–±–µ—Ä—ñ—Ç—å —á–∏–º –±–∏ —â–µ –ø–æ—Ü—ñ–∫–∞–≤–∏—Ç–∏—Å—å üßê: ',
                             reply_markup=snetwork_menu_keyboard())


def handler_reddit_top(update: Update, context: CallbackContext):
    context.bot.send_message(chat_id=update.effective_chat.id, text='–ó–∞—Ö–æ–¥–∂—É –Ω–∞ reddit ... ')
    red_top = parse_reddit_top()
    if red_top:
        for data in red_top:
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text=f"–ß–∞—Å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {data['time']}\n–ó–∞–≥–æ–ª–æ–≤–æ–∫ -> {data['title']}.\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–ª–æ—Å—ñ–≤: {data['number_vote']}.\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤: {data['comment']}\nLink: {data['link']}")
    else:
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text='–í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —ñ–∑ —Å–µ—Ä–≤–µ—Ä–æ–º, —Å–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞—Ç–∏ —â–µ —Ä–∞–∑!')
    context.bot.send_message(chat_id=update.effective_chat.id, text='–û–±–µ—Ä—ñ—Ç—å —á–∏–º –±–∏ —â–µ –ø–æ—Ü—ñ–∫–∞–≤–∏—Ç–∏—Å—å üßê: ',
                             reply_markup=snetwork_menu_keyboard())


def handler_wikipedia_start(update: Update, context: CallbackContext):
    context.bot.send_message(chat_id=update.effective_chat.id,
                             text='‚Üì –í–≤–µ–¥—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω—É –¥–ª—è –ø–æ—à—É–∫—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –Ω–∏–∂—á–µ, –∫—Ä–∞—â–µ —Ä–æ–∑—É–º—ñ—é —Ä–æ—Å—ñ–π—Å—å–∫—É –º–æ–≤—É(Ôø¢_Ôø¢) ‚Üì',
                             reply_markup=wiki_menu_keyboard())
    return WIKI


def handl_message_wiki(update: Update, context: CallbackContext):
    try:
        context.bot.send_message(chat_id=update.effective_chat.id, text='–ü–æ—á–∏–Ω–∞—é –ø–æ—à—É–∫ –Ω–∞ wikipedia ... ')
        wiki = search_wiki(update.effective_message.text)
        context.bot.send_message(chat_id=update.effective_chat.id, text=wiki, reply_markup=wiki_menu_keyboard())
    except (PageError, DisambiguationError):
        return context.bot.send_message(chat_id=update.effective_chat.id,
                                        text="–í–∏–±–∞—á—Ç–µ, —Ç—Ä–∞–ø–∏–ª–∞—Å—å —Ö–∞–ª–µ–ø–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–π—Ç–∏ —â–µ —Ä–∞–∑ –≤ —Ü–µ–π —Ä–æ–∑–¥—ñ–ª —ñ –∑—Ä–æ–±–∏—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ—à–∏–π –∑–∞–ø–∏—Ç (‚åí‚Äø‚åí)",
                                        reply_markup=wiki_menu_keyboard())


def massege_handler(update: Update, context: CallbackContext):
    url = get_image_url()
    chat_id = update.message.chat_id
    context.bot.send_photo(chat_id=chat_id, photo=url)
    context.bot.send_message(chat_id=update.effective_chat.id,
                             text='–í–∏–±–∞—á—Ç–µ(oÀò‚ó°Àòo),–∞–ª–µ —è –Ω–µ –≤–º—ñ—é —Ç—É—Ç —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å, –æ–±–µ—Ä—ñ—Ç—å —â–æ—Å—å —ñ–∑ /menu, –∞–±–æ –æ—Ç—Ä–∏–º–∞–π—Ç–µ –¥–æ–ø–æ–º–æ–≥—É /help')


def cancel(update: Update, context: CallbackContext):
    update.effective_message.reply_text('–î–∞ –ø—Ä–∏–±—É–¥–µ –∑ —Ç–æ–±–æ—é —Å–∏–ª–∞ –∑–Ω–∞–Ω—å ( ¬∞ ‚àÄ ¬∞ )ÔæâÔæû!', reply_markup=main_menu_keyboard())
    return ConversationHandler.END


@flask_app.route('/', methods=['GET', 'POST'])
def init_bot():
    updater = Updater(token=Config.TOKEN_BOT, use_context=True)
    dispatcher = updater.dispatcher

    conversation_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(handler_wikipedia_start, pattern='Wiki')
        ],
        states={
            WIKI: [
                MessageHandler(Filters.text & (~Filters.command), handl_message_wiki)
            ]
        },
        fallbacks=[
            CallbackQueryHandler(cancel, pattern='main')
        ]
    )
    dispatcher.add_handler(conversation_handler)
    dispatcher.add_handler(MessageHandler(Filters.all & ~Filters.command, massege_handler))
    dispatcher.add_handler(CommandHandler('start', start))
    dispatcher.add_handler(CommandHandler('help', help_))
    dispatcher.add_handler(CommandHandler('menu', menu_command))
    dispatcher.add_handler(CallbackQueryHandler(main_menu, pattern='main'))
    dispatcher.add_handler(CallbackQueryHandler(news_menu, pattern='News'))
    dispatcher.add_handler(CallbackQueryHandler(snetwork_menu, pattern='Social Network'))
    dispatcher.add_handler(CallbackQueryHandler(fun_menu, pattern='Fun'))
    dispatcher.add_handler(CallbackQueryHandler(handler_news_politic, pattern='Politic'))
    dispatcher.add_handler(CallbackQueryHandler(handler_news_economy, pattern='Economy'))
    dispatcher.add_handler(CallbackQueryHandler(handler_news_sport, pattern='Sport'))
    dispatcher.add_handler(CallbackQueryHandler(handler_news_sience, pattern='Sience'))
    dispatcher.add_handler(CallbackQueryHandler(handler_news_technology, pattern='Technology'))
    dispatcher.add_handler(CallbackQueryHandler(handler_news_avto, pattern='Auto'))
    dispatcher.add_handler(CallbackQueryHandler(handler_reddit_hot, pattern='Reddit Hot'))
    dispatcher.add_handler(CallbackQueryHandler(handler_reddit_new, pattern='New Reddit'))
    dispatcher.add_handler(CallbackQueryHandler(handler_reddit_top, pattern='Top Reddit'))
    dispatcher.add_handler(CallbackQueryHandler(handler_cats, pattern='Cats'))
    dispatcher.add_handler(CallbackQueryHandler(handler_dogs, pattern='Dogs'))
    dispatcher.add_handler(CallbackQueryHandler(handler_mems, pattern='Mems'))

    updater.start_polling()
    return 'Bot ready to work'
